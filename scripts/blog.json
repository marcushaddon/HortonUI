{
  "text": "Ok, so I have not kept up with this blog AT ALL. But it's not because I haven't been making stuff. In fact, I made this about a year ago.  ### What is it?  To put it simply, it's an in-browser predictive text engine. Think of when you're typing a message on your phone and for every word you type, the phone is suggesting three possible words you might want to type next. That's predictive text. What's happening is that Google or Apple or whoever uses various machine learning techniques to analyze many of lines of text from many users to figure out what words tend to follow other words, and uses the result to make suggestions on what you might want to say next.*  When this feature first appeared on iPhones, I used to love choosing a starting word and then just hitting random buttons and writing weird poetry / nonsense made entirely of iPhone predictions. It usually came out as something like 'my hair is the best way to find a way to get a phone for my brother and everyone knows that the best thing for me to to is find a way to get a thing for my hair...' etc.  So anyway, a while ago, I came across an article about a predictive text bot that someone made to feed a bunch of bluegrass lyrics to so that it would write uncanny pseudo-grass lyrics and tweet them into the void. In the article they mentioned that they based their code off of a concept called a Markov Chain.   So I read up on Markov Chains and thought I would make my own Markov Chain bot, with one twist:  This bot will forget everything it learns every time the page is refreshed.  Why? Well to be perfectly honest, at the time I started this project, I didn't feel confident in any backend language except for PHP (which I didn't want to write it in), and I hadn't been exposed to the wonders of the LocalStorage and BROWSERDB APIs.  BUT ALSO... I thought it could be interesting to allow users to curate what source text the bot was trained on! Obviously, the quality of text prediction will suffer, but in exchange you can copy and paste whatever you'd like into Horton, and he will try to output realistic text based solely on your input. So you get to see what it would be like if your phone was trained solely on Kanye lyrics...  So here you go. I give you, Horton. The little predictive text bot that forgets everything as soon as you dismiss him. You can type whatever you'd like into his input and see how he learns from it, or copy and paste large amounts of text from any source you'd like, or if you're in a rush, you can have him read from a few pre-prepared bodies of text, all so that you can play around with all the different ways to corrupt a predictive text engine.  Tip: Find two contrasting sources and feed them to Horton and see how they mashup."
}
